{"version":3,"sources":["components/Words.js","components/man.js","components/BoxanswerStyle.js","components/Boxanswer.js","components/Hangman.js","App.js","reportWebVitals.js","index.js"],"names":["programming_languages","randomWord","Math","floor","random","length","Man","props","visibility","className","class","style","Wrapper","styled","div","Item","active","Boxanswer","word","selectWord","space","correctWord","maxWrong","split","map","letter","has","x","item","index","find","Hangman","handleGuess","e","target","value","setState","st","guessed","add","mistake","answer","includes","handleKeyPress","preventDefault","state","i","key","arr","concat","resetButton","document","getElementById","focus","Set","correctLetters","wrongLetters","this","arrayOfSpace","arraySize","push","gameOver","isWinner","guessedWord","join","window","location","reload","id","onKeyPress","tabIndex","type","opacity","onClick","emptyBox","Component","defaultProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d03fe852.chunk.js","sourcesContent":["/* tab ou nous entrer des mots sous la facon JSON */\r\nvar programming_languages = [\r\n\t\"python\",\r\n\t\"javascript\",\r\n\t\"mongodb\",\r\n\t\"json\",\r\n\t\"java\",\r\n\t\"html\",\r\n\t\"css\",\r\n     \"c\",\r\n\t\"csharp\",\r\n\t\"golang\",\r\n\t\"kotlin\",\r\n\t\"php\",\r\n\t\"sql\",\r\n   \"ruby\",\r\n   \"fortran\",\r\n   \"bret\",\r\n   \"antonette\",\r\n   \"samantha\",\r\n   \"karianne\",\r\n   \"kamren\",\r\n   \"leopoldo\",\r\n   \"maxime\",\r\n   \"MAXIME\",\r\n   \"HELLO\",\r\n   \"WORLD\",\r\n   \"Attribute\",\r\n   \"Keyword\",\r\n]\r\n\r\n/* fonction qui génere les mots de facon random */\r\nfunction randomWord() {\t\r\n  return programming_languages[Math.floor(Math.random() * programming_languages.length)] \r\n  \r\n}\r\n\r\n/* utilisation d'un API qui ne génere pas des mots\r\n\r\n/*function randomWord() {\t\r\n  return fetch(\"https://wordsapiv1.p.rapidapi.com/words/%7Bword%7D\", {\r\n\t\"method\": \"GET\",\r\n\t\"headers\": {\r\n\t\t\"x-rapidapi-key\": \"eed9d4b1ecmshe59442c11191101p1b4ba7jsn7831e5301629\",\r\n\t\t\"x-rapidapi-host\": \"wordsapiv1.p.rapidapi.com\"\r\n\t}\r\n})\r\n.then(response => {\r\n\tconsole.log(response);\r\n})\r\n.catch(err => {\r\n\tconsole.error(err);\r\n});*/\r\n\r\n\r\nexport { randomWord }\r\n","import React, { Component } from 'react';\r\nimport './man.scss'\r\n\r\nconst Man = (props) => {\r\n    const {visibility} = props\r\n    return(\r\n        <div>\r\n            \r\n\r\n\r\n  <div className=\"man\" >\r\n    \r\n     {/* SHOW AND HIDE THE MAN HEAD */}\r\n    {visibility >= 1 ? <div class=\"head\" >\r\n      <div className=\"eye-left\"></div>\r\n      <div className=\"eye-right\"></div>\r\n      <div className=\"ear-left\"></div>\r\n      <div className=\"ear-right\"></div>\r\n      <div className=\"nose\"></div>\r\n      <div className=\"mouth\"> </div>\r\n    </div>\r\n     : null\r\n    }\r\n    \r\n    {/* SHOW AND HIDE THE MAN NEAK */}\r\n    {visibility >= 2 ? <div className=\"neck\"  ></div> : null } \r\n    \r\n    {/* SHOW AND HIDE THE MAN CORPUS */}\r\n    <div className=\"corpus\" style={{visibility : visibility >= 3 ? 'visible': 'hidden'}}> \r\n        <div className=\"corpus-chest-left\" style={{visibility : visibility >= 3 ? 'visible': 'hidden'}}>\r\n        <div className=\"left-arm\" style={{visibility : visibility >= 5 ? 'visible': 'hidden'}}>\r\n          <div class=\"left-hand\" style={{visibility : visibility >= 7 ? 'visible': 'hidden'}}></div>\r\n        </div>\r\n        <div className=\"left-leg\" style={{visibility : visibility >= 9 ? 'visible': 'hidden'}}>\r\n          <div className=\"left-foot\" style={{visibility : visibility >= 11 ? 'visible': 'hidden'}}></div>\r\n        </div>\r\n      </div>\r\n\r\n       <div className=\"corpus-chest-right\" style={{visibility : visibility >= 3 ? 'visible': 'hidden'}}>\r\n        <div className=\"right-arm\" style={{visibility : visibility >= 4 ? 'visible': 'hidden'}}>\r\n          <div className=\"right-hand\" style={{visibility : visibility >= 6 ? 'visible': 'hidden'}}></div>\r\n        </div>\r\n        <div className=\"right-leg\" style={{visibility : visibility >= 8 ? 'visible': 'hidden'}}>\r\n          <div className=\"right-foot\" style={{visibility : visibility >= 10 ? 'visible': 'hidden'}}></div>\r\n        </div>\r\n      </div>\r\n       \r\n      \r\n\r\n    </div>\r\n  </div>\r\n\r\n          \r\n        </div>\r\n    );\r\n\r\n}\r\nexport default Man;","import styled, { css } from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  position: absolute;\r\n  bottom: 40px;\r\n  width: 95%;\r\n  height: 70px;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  left: 0;\r\n  right: 0;\r\n  bottom : 2px;\r\n  display : flex;\r\n  flex-direction: row;\r\n  justify-content: space-around;\r\n  overflow: hidden;\r\n\r\n  @media (max-width: 576px){\r\n    width: 90%;\r\n    height: 120px;\r\n    display:flex;\r\n    justify-content :center;\r\n    justify-content: center;\r\n       align-items: center;\r\n    flex-wrap: wrap;\r\n    position: absolute;\r\n  bottom: 0px;\r\n  }\r\n`\r\n\r\nexport const Item = styled.div`\r\n  float: left;\r\n  background-color: ${props => props.active ? '#E6E6E7' : '#53555D'};\r\n  width: 8%;\r\n  height: 70px;\r\n  margin: 0 3px;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  text-transform: uppercase;\r\n  color: #E6E6E7;\r\n  padding: 20px 20px;\r\n  overflow: hidden;\r\n\r\n  &:first-child {\r\n    margin-left: 0;\r\n  }\r\n\r\n  &:last-child {\r\n    margin-right: 0;\r\n  }\r\n  @media (max-width: 576px){\r\n    width: 6%;\r\n  height: 40px;\r\n  text-align : center;\r\n  overflow: hidden;\r\n  line-height: 10px;\r\n  display:flex;\r\n    justify-content :center;\r\n    justify-content: center;\r\n       align-items: center;\r\n  }\r\n`\r\n","import React, { Component } from 'react';\r\nimport { Item, Wrapper } from './BoxanswerStyle'; /* Utilisation de styled component */\r\n\r\nconst Boxanswer = (props) => {\r\n    const {word , selectWord , space , maxWrong} = props; /* utilisation des props qui nous passer dans Hangman */\r\n    const correctWord = word.split(\"\").map(letter => (selectWord.has(letter) ? letter : '')); /* constante qui nous donne le correcte alphabet par rapport au mot */\r\n\r\n    const ListItem = word.split('').map(x =>{\r\n      return (\r\n        <Item></Item>\r\n      )\r\n      \r\n\r\n    })\r\n\r\n    return(\r\n       <div className=\"boxanswer\">\r\n         <Wrapper> {/* affichage du mot génere au desous */}\r\n\r\n         {space.map((item, index) => (\r\n        <Item active>H</Item> /* affichage de champs de texte vide en gris */\r\n    ))}\r\n\r\n        {/* géneration de champ de texte qui contient de vrai alphabets correctes */}\r\n         {word.split('').map((letter, index) => {\r\n      return (\r\n        <Item key={index}>\r\n          {correctWord.find(x => x === letter) ? letter : ''}\r\n        </Item>\r\n      )\r\n    })}\r\n         </Wrapper>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Boxanswer;","import React, { Component , useState , useEffect} from 'react';\r\nimport './Hangman.scss';\r\nimport { randomWord } from './Words.js';\r\nimport Man from './man.js';\r\nimport Boxanswer from './Boxanswer';\r\n \r\nclass Hangman extends Component {\r\n\r\n  static defaultProps = {\r\n    maxWrong: 11, /* Props pour donner le nombre maximale des erreurs*/ \r\n  }\r\n  \r\n  /* Nos States */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mistake: 0, /* state pour compter les nombres des alphabets non valide */\r\n      guessed: new Set([]), /* State pour stocker les alphabets entrées par clavier */\r\n      answer: randomWord(), /* state pour nous stocker les mots génerer*/\r\n      class :true, /* state pour afficher l'overley de NEW GAME*/\r\n      arr: [] , /* state pour stocker les mots génerer */\r\n    }\r\n  }\r\n\r\n  /* Fonction pour modifier les nombres des erreurs et modifier les alphabets génerer pale le clavier */\r\n  handleGuess = e => {\r\n    let letter = e.target.value;\r\n    this.setState(st => ({\r\n      guessed: st.guessed.add(letter),\r\n      mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1),\r\n    }));\r\n  }\r\n\r\n/* Fonction pour modifier les nombres des erreurs et modifier les alphabets génerer pale le clavier */\r\n  handleKeyPress = (e) => {\r\n    e.preventDefault();\r\n    let y = this.state.answer;\r\n    let count = 0;\r\n    let x = this.state.answer.split(\"\").map(letter => letter );\r\n      \r\n    for(let i = 0; i < this.state.answer.length; i++){\r\n      if (e.key === x[i]) {\r\n       count++\r\n       this.state.arr.concat(e.key);\r\n      }\r\n    }\r\n    let letter = e.key;\r\n    this.setState(st => ({\r\n      guessed: st.guessed.add(letter),\r\n      mistake: st.mistake + (st.answer.includes(letter) ? 0 : 1),\r\n      arr:st.arr.concat(letter)\r\n    }));\r\n  }\r\n\r\n  /* fonction pour comparer entre les alphabets du mot génerer et l'alphabet entrer par le clavier */\r\n  guessedWord() {\r\n    return this.state.answer.split(\"\").map(letter => (this.state.guessed.has(letter) ? letter : \" _ \"));\r\n  }\r\n\r\n  /*Fontion reset */\r\n  resetButton = (e) => {\r\n    document.getElementById(\"myTextField\").focus();\r\n    this.setState({\r\n      mistake: 0,\r\n      guessed: new Set([]),\r\n      answer: randomWord(),\r\n      correctLetters : [],\r\n      wrongLetters : [],\r\n      class:!this.state.class\r\n    });\r\n  }\r\n  \r\n  /* fonction pour nous donnée les divs vides dans notre interface  */\r\n  emptyBox  ()  {\r\n    let arrayOfSpace = []\r\n    if (this.state.answer.length > 0) {\r\n      const arraySize = this.state.answer.length\r\n      for (let x = 0; x < 11 - arraySize; x++) {\r\n        arrayOfSpace.push(' ')\r\n      }\r\n    }\r\n    return arrayOfSpace\r\n  }\r\n\r\n  render() {\r\n    const gameOver = this.state.mistake >= this.props.maxWrong; /* Comparer entre les nombres des erreurs et le nombre maximale des erreurs */\r\n    const isWinner = this.guessedWord().join(\"\") === this.state.answer; /* comparison entre la table ou nous stockons chaque alphabet entrer par le clavier et le mot génerer */\r\n    const num_mistake = this.state.mistake; /* constante pour nous donnons le nombre des erreurs */\r\n    \r\n    \r\n    if(num_mistake == 11){/* if nombre des errurs égale a 11 la page reload */\r\n      window.location.reload(false);\r\n    }\r\n\r\n    if(isWinner){ /* if le mot génerer et les alphabets stochées sont égeaux la page reload */\r\n      window.location.reload(false);\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n      <div className=\"Hangman\"> {/* div principale */}\r\n        <h1 className='text-center title'>Hangman</h1> {/* titre de notre page */ }\r\n        <div className=\"Gallow\"> {/* div Potence */}\r\n          <div className='DownPipe'></div>\r\n        </div> {/* ./Gallow */}\r\n\r\n        <div className=\"text-error\">{/* div pour nous donnons les alphabets manqué par l'utilisateur*/}\r\n           <p className=\"you_missed_text\">YOU MISSED :</p>\r\n           <p className=\"error_letter\">{ this.state.guessed }</p>\r\n        </div> {/* ./text-error */}\r\n\r\n        <div className=\"man\"> {/* div Homme */}\r\n         <Man visibility={this.state.mistake}/> {/* on passe les nombres des erreurs comme props pour nous commander l'affichage des composants de l'homme */ }\r\n        </div> {/*./man */}\r\n\r\n        <div className=\"text-center text-letter\">{/* div pour nous donner le mot génere */}\r\n\r\n          <div className='correctWord' id=\"myTextField\" onKeyPress={this.handleKeyPress} tabIndex={-1} >\r\n            {!gameOver ? this.guessedWord() : this.state.answer}\r\n            <input type=\"text\" style ={{opacity: '0'}}  />\r\n          </div>\r\n\r\n          <div className={(!this.state.class) ? \"none\":\"block\" }> {/* div pour afficher le bouton 'NEW GAME' */}\r\n          <p id='id_game_status' className=\"game-status\">{(this.state.mistake == 11) ? 'GAME OVER' : 'GAME ON !' }</p>\r\n          <button className='btn btn-info btn-new-game'  onClick={this.resetButton}>New Game</button>\r\n          </div>\r\n           \r\n        </div>{/* ./text-letter */}\r\n\r\n        <div className='RightBlueTriangle'></div>{/* './RightBlueTriangle' div pour afficher le triangle bleu a droite */}\r\n\r\n         <div className='boxanswer'> { /* div pour afficher les alphabets vrais au dessous */}\r\n         <Boxanswer\r\n           word={this.state.answer}         /* on passe le state ou on stocke le mot génerer */\r\n           selectWord={this.state.guessed}  /* pour passer chaque alphabet entrer par clavier */ \r\n           space={this.emptyBox()}          /* props qui nous donne les divs vide au dessous */\r\n           maxWrong={this.props.maxWrong}   /* le nombre maximale des erreurs comme props */\r\n         />\r\n         </div>{/* ./boxanswer */}\r\n\r\n      </div>{/* ./Hangman */ }\r\n      \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Hangman;","import React from 'react';\nimport Hangman from './components/Hangman';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Hangman />{/* Principale component */ }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}